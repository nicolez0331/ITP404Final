{"ast":null,"code":"var _jsxFileName = \"/Users/nicolez./Desktop/ITP404/final/src/components/DropdownWithNewItem.js\";\nimport { render, fireEvent } from \"@testing-library/react\";\nimport DropdownWithNewItem from \"./DropdownWithNewItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndescribe(\"DropdownWithNewItem\", () => {\n  const label = \"Category\";\n  const setSelectedId = jest.fn();\n  const apiEndpoint = \"https://fakeapi.com/options\";\n\n  // Mocked API response for testing\n  const mockOptions = [{\n    id: \"1\",\n    name: \"Option 1\"\n  }, {\n    id: \"2\",\n    name: \"Option 2\"\n  }];\n\n  // Mock fetch API globally\n  beforeEach(() => {\n    global.fetch = jest.fn(() => Promise.resolve({\n      json: () => Promise.resolve(mockOptions)\n    }));\n  });\n  afterEach(() => {\n    jest.clearAllMocks(); // Clear mocks after each test\n  });\n  test(\"should render the dropdown with options\", () => {\n    const {\n      getByTestId\n    } = render(/*#__PURE__*/_jsxDEV(DropdownWithNewItem, {\n      label: label,\n      apiEndpoint: apiEndpoint,\n      selectedId: null,\n      setSelectedId: setSelectedId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this));\n\n    // Check that the dropdown is rendered\n    const dropdown = getByTestId(\"dropdown-select\");\n    expect(dropdown).toBeInTheDocument();\n\n    // Check that the options are rendered\n    const option1 = getByTestId(\"dropdown-option-1\");\n    const option2 = getByTestId(\"dropdown-option-2\");\n    expect(option1).toHaveTextContent(\"Option 1\");\n    expect(option2).toHaveTextContent(\"Option 2\");\n  });\n  test(\"should select an existing item from the dropdown\", () => {\n    const {\n      getByTestId\n    } = render(/*#__PURE__*/_jsxDEV(DropdownWithNewItem, {\n      label: label,\n      apiEndpoint: apiEndpoint,\n      selectedId: null,\n      setSelectedId: setSelectedId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this));\n\n    // Simulate selecting an existing option\n    const dropdown = getByTestId(\"dropdown-select\");\n    fireEvent.change(dropdown, {\n      target: {\n        value: \"1\"\n      }\n    });\n\n    // Check if setSelectedId is called with the selected value\n    expect(setSelectedId).toHaveBeenCalledWith(\"1\");\n  });\n});","map":{"version":3,"names":["render","fireEvent","DropdownWithNewItem","jsxDEV","_jsxDEV","describe","label","setSelectedId","jest","fn","apiEndpoint","mockOptions","id","name","beforeEach","global","fetch","Promise","resolve","json","afterEach","clearAllMocks","test","getByTestId","selectedId","fileName","_jsxFileName","lineNumber","columnNumber","dropdown","expect","toBeInTheDocument","option1","option2","toHaveTextContent","change","target","value","toHaveBeenCalledWith"],"sources":["/Users/nicolez./Desktop/ITP404/final/src/components/DropdownWithNewItem.js"],"sourcesContent":["import { render, fireEvent } from \"@testing-library/react\";\nimport DropdownWithNewItem from \"./DropdownWithNewItem\";\n\ndescribe(\"DropdownWithNewItem\", () => {\n  const label = \"Category\";\n  const setSelectedId = jest.fn();\n  const apiEndpoint = \"https://fakeapi.com/options\";\n\n  // Mocked API response for testing\n  const mockOptions = [\n    { id: \"1\", name: \"Option 1\" },\n    { id: \"2\", name: \"Option 2\" },\n  ];\n\n  // Mock fetch API globally\n  beforeEach(() => {\n    global.fetch = jest.fn(() =>\n      Promise.resolve({\n        json: () => Promise.resolve(mockOptions),\n      })\n    );\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks(); // Clear mocks after each test\n  });\n\n  test(\"should render the dropdown with options\", () => {\n    const { getByTestId } = render(\n      <DropdownWithNewItem\n        label={label}\n        apiEndpoint={apiEndpoint}\n        selectedId={null}\n        setSelectedId={setSelectedId}\n      />\n    );\n\n    // Check that the dropdown is rendered\n    const dropdown = getByTestId(\"dropdown-select\");\n    expect(dropdown).toBeInTheDocument();\n\n    // Check that the options are rendered\n    const option1 = getByTestId(\"dropdown-option-1\");\n    const option2 = getByTestId(\"dropdown-option-2\");\n    expect(option1).toHaveTextContent(\"Option 1\");\n    expect(option2).toHaveTextContent(\"Option 2\");\n  });\n\n  test(\"should select an existing item from the dropdown\", () => {\n    const { getByTestId } = render(\n      <DropdownWithNewItem\n        label={label}\n        apiEndpoint={apiEndpoint}\n        selectedId={null}\n        setSelectedId={setSelectedId}\n      />\n    );\n\n    // Simulate selecting an existing option\n    const dropdown = getByTestId(\"dropdown-select\");\n    fireEvent.change(dropdown, { target: { value: \"1\" } });\n\n    // Check if setSelectedId is called with the selected value\n    expect(setSelectedId).toHaveBeenCalledWith(\"1\");\n  });\n});\n"],"mappings":";AAAA,SAASA,MAAM,EAAEC,SAAS,QAAQ,wBAAwB;AAC1D,OAAOC,mBAAmB,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExDC,QAAQ,CAAC,qBAAqB,EAAE,MAAM;EACpC,MAAMC,KAAK,GAAG,UAAU;EACxB,MAAMC,aAAa,GAAGC,IAAI,CAACC,EAAE,CAAC,CAAC;EAC/B,MAAMC,WAAW,GAAG,6BAA6B;;EAEjD;EACA,MAAMC,WAAW,GAAG,CAClB;IAAEC,EAAE,EAAE,GAAG;IAAEC,IAAI,EAAE;EAAW,CAAC,EAC7B;IAAED,EAAE,EAAE,GAAG;IAAEC,IAAI,EAAE;EAAW,CAAC,CAC9B;;EAED;EACAC,UAAU,CAAC,MAAM;IACfC,MAAM,CAACC,KAAK,GAAGR,IAAI,CAACC,EAAE,CAAC,MACrBQ,OAAO,CAACC,OAAO,CAAC;MACdC,IAAI,EAAEA,CAAA,KAAMF,OAAO,CAACC,OAAO,CAACP,WAAW;IACzC,CAAC,CACH,CAAC;EACH,CAAC,CAAC;EAEFS,SAAS,CAAC,MAAM;IACdZ,IAAI,CAACa,aAAa,CAAC,CAAC,CAAC,CAAC;EACxB,CAAC,CAAC;EAEFC,IAAI,CAAC,yCAAyC,EAAE,MAAM;IACpD,MAAM;MAAEC;IAAY,CAAC,GAAGvB,MAAM,cAC5BI,OAAA,CAACF,mBAAmB;MAClBI,KAAK,EAAEA,KAAM;MACbI,WAAW,EAAEA,WAAY;MACzBc,UAAU,EAAE,IAAK;MACjBjB,aAAa,EAAEA;IAAc;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CACH,CAAC;;IAED;IACA,MAAMC,QAAQ,GAAGN,WAAW,CAAC,iBAAiB,CAAC;IAC/CO,MAAM,CAACD,QAAQ,CAAC,CAACE,iBAAiB,CAAC,CAAC;;IAEpC;IACA,MAAMC,OAAO,GAAGT,WAAW,CAAC,mBAAmB,CAAC;IAChD,MAAMU,OAAO,GAAGV,WAAW,CAAC,mBAAmB,CAAC;IAChDO,MAAM,CAACE,OAAO,CAAC,CAACE,iBAAiB,CAAC,UAAU,CAAC;IAC7CJ,MAAM,CAACG,OAAO,CAAC,CAACC,iBAAiB,CAAC,UAAU,CAAC;EAC/C,CAAC,CAAC;EAEFZ,IAAI,CAAC,kDAAkD,EAAE,MAAM;IAC7D,MAAM;MAAEC;IAAY,CAAC,GAAGvB,MAAM,cAC5BI,OAAA,CAACF,mBAAmB;MAClBI,KAAK,EAAEA,KAAM;MACbI,WAAW,EAAEA,WAAY;MACzBc,UAAU,EAAE,IAAK;MACjBjB,aAAa,EAAEA;IAAc;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CACH,CAAC;;IAED;IACA,MAAMC,QAAQ,GAAGN,WAAW,CAAC,iBAAiB,CAAC;IAC/CtB,SAAS,CAACkC,MAAM,CAACN,QAAQ,EAAE;MAAEO,MAAM,EAAE;QAAEC,KAAK,EAAE;MAAI;IAAE,CAAC,CAAC;;IAEtD;IACAP,MAAM,CAACvB,aAAa,CAAC,CAAC+B,oBAAoB,CAAC,GAAG,CAAC;EACjD,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}